import gspread
from google.oauth2.service_account import Credentials
import os
from datetime import datetime, timedelta
import logging
from typing import List, Dict, Optional
from collections import defaultdict
from performance_optimizer import cache_sheets_data, performance_optimizer

logger = logging.getLogger(__name__)

class GoogleSheetsService:
    """D·ªãch v·ª• qu·∫£n l√Ω Google Sheets"""
    
    def __init__(self):
        self.credentials_path = os.getenv('GOOGLE_CREDENTIALS_PATH')
        self.sheet_id = os.getenv('GOOGLE_SHEET_ID')
        self.sheet_url = os.getenv('GOOGLE_SHEET_URL')
        
        if not self.credentials_path:
            raise ValueError("GOOGLE_CREDENTIALS_PATH kh√¥ng t√¨m th·∫•y trong .env")
        if not self.sheet_id:
            raise ValueError("GOOGLE_SHEET_ID kh√¥ng t√¨m th·∫•y trong .env")
        if not self.sheet_url:
            raise ValueError("GOOGLE_SHEET_URL kh√¥ng t√¨m th·∫•y trong .env")
            
        self._setup_client()
    
    def _setup_client(self):
        """Thi·∫øt l·∫≠p client Google Sheets"""
        try:
            # C·∫•u h√¨nh scopes
            scopes = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
            
            # T·∫°o credentials t·ª´ file JSON
            credentials = Credentials.from_service_account_file(
                self.credentials_path, 
                scopes=scopes
            )
            
            # Kh·ªüi t·∫°o client
            self.client = gspread.authorize(credentials)
            self.spreadsheet = self.client.open_by_key(self.sheet_id)
            
            # Kh√¥ng t·∫°o worksheet m·∫∑c ƒë·ªãnh n·ªØa - s·∫Ω t·∫°o theo user
            logger.info("‚úÖ Google Sheets client ƒë√£ s·∫µn s√†ng - Multi-user mode")
                
        except Exception as e:
            logger.error(f"L·ªói thi·∫øt l·∫≠p Google Sheets client: {e}")
            raise
    
    def _get_or_create_user_worksheet(self, user_name: str):
        """L·∫•y ho·∫∑c t·∫°o worksheet cho user"""
        try:
            # Normalize t√™n user (lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát)
            safe_name = "".join(c for c in user_name if c.isalnum() or c in (' ', '_', '-')).strip()
            if not safe_name:
                safe_name = "Unknown_User"
            
            # Gi·ªõi h·∫°n ƒë·ªô d√†i t√™n worksheet (Google Sheets limit)
            if len(safe_name) > 100:
                safe_name = safe_name[:97] + "..."
            
            try:
                # Th·ª≠ l·∫•y worksheet c√≥ s·∫µn
                worksheet = self.spreadsheet.worksheet(safe_name)
                logger.info(f"üìã S·ª≠ d·ª•ng worksheet c√≥ s·∫µn: {safe_name}")
                return worksheet
            except gspread.WorksheetNotFound:
                # T·∫°o worksheet m·ªõi cho user
                logger.info(f"üÜï T·∫°o worksheet m·ªõi cho user: {safe_name}")
                worksheet = self.spreadsheet.add_worksheet(
                    title=safe_name,
                    rows="1000",
                    cols="10"
                )
                # Th√™m header
                worksheet.append_row([
                    "Ng√†y", "Lo·∫°i", "S·ªë ti·ªÅn", "Danh m·ª•c", "Ghi ch√∫"
                ])
                return worksheet
                
        except Exception as e:
            logger.error(f"L·ªói t·∫°o/l·∫•y worksheet cho user {user_name}: {e}")
            raise

    def test_connection(self):
        """Test k·∫øt n·ªëi Google Sheets"""
        try:
            # Test b·∫±ng c√°ch l·∫•y th√¥ng tin spreadsheet
            sheet_title = self.spreadsheet.title
            logger.info(f"‚úÖ Test k·∫øt n·ªëi th√†nh c√¥ng. Spreadsheet: {sheet_title}")
            return True
        except Exception as e:
            logger.error(f"‚ùå L·ªói test k·∫øt n·ªëi: {e}")
            raise
    
    def add_transaction(self, transaction_type: str, amount: float, category: str, 
                       note: str, user_name: str, custom_date: str = None) -> bool:
        """
        Th√™m giao d·ªãch m·ªõi v√†o worksheet ri√™ng c·ªßa user
        
        Args:
            transaction_type: 'Thu' ho·∫∑c 'Chi'
            amount: S·ªë ti·ªÅn
            category: Danh m·ª•c
            note: Ghi ch√∫
            user_name: T√™n ng∆∞·ªùi d√πng (display_name)
            custom_date: Ng√†y t√πy ch·ªânh (VD: "5/9", "h√¥m qua", null)
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        try:
            # L·∫•y worksheet ri√™ng cho user n√†y
            user_worksheet = self._get_or_create_user_worksheet(user_name)
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu (kh√¥ng c·∫ßn user_name n·ªØa v√¨ ƒë√£ c√≥ worksheet ri√™ng)
            from utils.date_utils import parse_custom_date
            
            # Parse custom date ho·∫∑c s·ª≠ d·ª•ng th·ªùi gian hi·ªán t·∫°i
            target_datetime = parse_custom_date(custom_date)
            formatted_time = target_datetime.strftime("%d/%m/%Y %H:%M:%S")
            
            row_data = [
                formatted_time,
                transaction_type,
                amount,
                category,
                note
            ]
            
            # Th√™m v√†o worksheet c·ªßa user
            user_worksheet.append_row(row_data)
            
            logger.info(f"üë§ {user_name}: {transaction_type} - {amount:,.0f} VNƒê - {category}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói th√™m giao d·ªãch cho {user_name}: {e}")
            return False
    
    def get_transactions(self, user_name: str, start_date: datetime = None, end_date: datetime = None) -> List[Dict]:
        """
        L·∫•y danh s√°ch giao d·ªãch theo kho·∫£ng th·ªùi gian t·ª´ worksheet c·ªßa user
        
        Args:
            user_name: T√™n ng∆∞·ªùi d√πng
            start_date: Ng√†y b·∫Øt ƒë·∫ßu
            end_date: Ng√†y k·∫øt th√∫c
            
        Returns:
            List[Dict]: Danh s√°ch giao d·ªãch
        """
        try:
            # L·∫•y worksheet c·ªßa user
            user_worksheet = self._get_or_create_user_worksheet(user_name)
            
            # L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ worksheet c·ªßa user
            all_records = user_worksheet.get_all_records()
            
            if not all_records:
                return []
            
            transactions = []
            
            for record in all_records:
                try:
                    # Parse ng√†y t·ª´ string
                    date_str = record.get('Ng√†y', '')
                    if not date_str:
                        continue
                    
                    # X·ª≠ l√Ω format ng√†y (c√≥ th·ªÉ c√≥ gi·ªù)
                    if ' ' in date_str:
                        date_part = date_str.split(' ')[0]
                    else:
                        date_part = date_str
                    
                    transaction_date = datetime.strptime(date_part, "%d/%m/%Y")
                    
                    # L·ªçc theo kho·∫£ng th·ªùi gian
                    if start_date and transaction_date < start_date:
                        continue
                    if end_date and transaction_date > end_date:
                        continue
                    
                    # Chu·∫©n h√≥a s·ªë ti·ªÅn
                    amount = 0
                    if record.get('S·ªë ti·ªÅn'):
                        try:
                            amount = float(str(record['S·ªë ti·ªÅn']).replace(',', ''))
                        except:
                            amount = 0
                    
                    transaction = {
                        'date': transaction_date,
                        'type': record.get('Lo·∫°i', ''),
                        'amount': amount,
                        'category': record.get('Danh m·ª•c', ''),
                        'note': record.get('Ghi ch√∫', ''),
                        'user': record.get('Ng∆∞·ªùi d√πng', '')
                    }
                    
                    transactions.append(transaction)
                    
                except Exception as e:
                    logger.warning(f"L·ªói parse giao d·ªãch: {record}, Error: {e}")
                    continue
            
            return transactions
            
        except Exception as e:
            logger.error(f"L·ªói l·∫•y giao d·ªãch: {e}")
            return []
    
    def get_categories(self) -> Dict[str, List[str]]:
        """
        L·∫•y danh s√°ch danh m·ª•c theo lo·∫°i giao d·ªãch
        
        Returns:
            Dict: {'Thu': [...], 'Chi': [...]}
        """
        try:
            all_records = self.worksheet.get_all_records()
            categories = {'Thu': set(), 'Chi': set()}
            
            for record in all_records:
                transaction_type = record.get('Lo·∫°i', '')
                category = record.get('Danh m·ª•c', '')
                
                if transaction_type in categories and category:
                    categories[transaction_type].add(category)
            
            # Convert set to sorted list
            return {
                'Thu': sorted(list(categories['Thu'])),
                'Chi': sorted(list(categories['Chi']))
            }
            
        except Exception as e:
            logger.error(f"L·ªói l·∫•y danh m·ª•c: {e}")
            return {'Thu': [], 'Chi': []}
    
    def get_statistics(self, user_name: str, start_date: datetime, end_date: datetime) -> Dict:
        """
        T√≠nh to√°n th·ªëng k√™ thu chi cho user c·ª• th·ªÉ
        
        Args:
            user_name: T√™n ng∆∞·ªùi d√πng
            start_date: Ng√†y b·∫Øt ƒë·∫ßu
            end_date: Ng√†y k·∫øt th√∫c
            
        Returns:
            Dict: Th·ªëng k√™ chi ti·∫øt
        """
        try:
            transactions = self.get_transactions(user_name, start_date, end_date)
            
            if not transactions:
                return {
                    'total_income': 0,
                    'total_expense': 0,
                    'balance': 0,
                    'income_categories': {},
                    'expense_categories': {},
                    'transaction_count': 0
                }
            
            total_income = 0
            total_expense = 0
            income_categories = defaultdict(float)
            expense_categories = defaultdict(float)
            
            for transaction in transactions:
                amount = transaction['amount']
                category = transaction['category']
                
                if transaction['type'] == 'Thu':
                    total_income += amount
                    income_categories[category] += amount
                elif transaction['type'] == 'Chi':
                    total_expense += amount
                    expense_categories[category] += amount
            
            return {
                'total_income': total_income,
                'total_expense': total_expense,
                'balance': total_income - total_expense,
                'income_categories': dict(income_categories),
                'expense_categories': dict(expense_categories),
                'transaction_count': len(transactions),
                'start_date': start_date,
                'end_date': end_date
            }
            
        except Exception as e:
            logger.error(f"L·ªói t√≠nh th·ªëng k√™: {e}")
            return {
                'total_income': 0,
                'total_expense': 0,
                'balance': 0,
                'income_categories': {},
                'expense_categories': {},
                'transaction_count': 0
            }
    
    def get_sheet_url(self) -> str:
        """L·∫•y URL c·ªßa Google Sheet"""
        return self.sheet_url