import google.generativeai as genai
import os
import logging
from typing import Optional
import json
from services.api_key_manager import APIKeyManager

logger = logging.getLogger(__name__)

class GeminiAIService:
    """Service t√≠ch h·ª£p Gemini AI v·ªõi multiple API keys rotation"""
    
    def __init__(self):
        self.api_manager = APIKeyManager()
        self.model = None
        self.current_api_key = None
        self.enabled = False
        
        if self.api_manager.has_available_keys():
            self._initialize_with_current_key()
        else:
            logger.warning("‚ö†Ô∏è  Kh√¥ng c√≥ API key kh·∫£ d·ª•ng - t√≠nh nƒÉng AI s·∫Ω b·ªã v√¥ hi·ªáu h√≥a")
    
    def _initialize_with_current_key(self):
        """Kh·ªüi t·∫°o Gemini v·ªõi API key hi·ªán t·∫°i"""
        try:
            api_key = self.api_manager.get_current_api_key()
            if not api_key:
                self.enabled = False
                return
            
            # Ch·ªâ configure l·∫°i n·∫øu key kh√°c
            if api_key != self.current_api_key:
                genai.configure(api_key=api_key)
                self.model = genai.GenerativeModel('gemini-1.5-flash')
                self.current_api_key = api_key
                
                key_index = self.api_manager.api_keys.index(api_key) + 1
                logger.info(f"üîë Gemini AI kh·ªüi t·∫°o v·ªõi API Key {key_index}")
            
            self.enabled = True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o Gemini AI: {e}")
            self.enabled = False
    
    def categorize_expense(self, description: str) -> str:
        """
        Ph√¢n lo·∫°i kho·∫£n chi d·ª±a tr√™n m√¥ t·∫£
        
        Args:
            description: M√¥ t·∫£ kho·∫£n chi (VD: "tr√† s·ªØa", "ƒë·ªï xƒÉng", "mua √°o")
            
        Returns:
            str: Danh m·ª•c ƒë∆∞·ª£c ph√¢n lo·∫°i
        """
        if not self.enabled:
            return "Kh√°c"
        
        try:
            prompt = f"""
H√£y ph√¢n lo·∫°i kho·∫£n chi ti√™u sau v√†o m·ªôt trong c√°c danh m·ª•c ph√π h·ª£p nh·∫•t:

M√¥ t·∫£: "{description}"

Danh s√°ch danh m·ª•c c√≥ s·∫µn:
- ƒÇn u·ªëng: ƒë·ªì ƒÉn, th·ª©c u·ªëng, nh√† h√†ng, qu√°n c√† ph√™, tr√† s·ªØa, b√°nh k·∫πo, n∆∞·ªõng, lu·ªôc, x√†o, chi√™n, th·ªãt, c√°, g√†, rau, c·ªß, qu·∫£
- Di chuy·ªÉn: xƒÉng xe, v√© xe bu√Ωt, taxi, grab, ƒëi l·∫°i, g·ª≠i xe, ti·ªÅn xe, ph√≠ ƒë∆∞·ªùng
- Mua s·∫Øm: qu·∫ßn √°o, gi√†y d√©p, ƒë·ªì d√πng, m·ªπ ph·∫©m, ƒëi·ªán t·ª≠, laptop, ƒëi·ªán tho·∫°i
- Gi·∫£i tr√≠: xem phim, game, du l·ªãch, karaoke, bar, concert, show
- Y t·∫ø: thu·ªëc, kh√°m b·ªánh, nha khoa, b·∫£o hi·ªÉm y t·∫ø, x√©t nghi·ªám
- H·ªçc t·∫≠p: s√°ch v·ªü, kh√≥a h·ªçc, h·ªçc ph√≠, vƒÉn ph√≤ng ph·∫©m, gi√°o d·ª•c
- Nh√† c·ª≠a: ti·ªÅn nh√†, ƒëi·ªán n∆∞·ªõc, internet, s·ª≠a ch·ªØa, gas, wifi
- Kh√°c: nh·ªØng th·ª© TH·ª∞C S·ª∞ kh√¥ng thu·ªôc 7 danh m·ª•c tr√™n

QUAN TR·ªåNG: "n∆∞·ªõng", "lu·ªôc", "x√†o", "chi√™n" = N·∫§U ƒÇN ‚Üí ƒÇn u·ªëng

Ch·ªâ tr·∫£ v·ªÅ T√äN DANH M·ª§C, kh√¥ng gi·∫£i th√≠ch g√¨ th√™m.
"""
            
            response = self.model.generate_content(prompt)
            category = response.text.strip()
            
            # Validate danh m·ª•c tr·∫£ v·ªÅ
            valid_categories = [
                "ƒÇn u·ªëng", "Di chuy·ªÉn", "Mua s·∫Øm", "Gi·∫£i tr√≠", 
                "Y t·∫ø", "H·ªçc t·∫≠p", "Nh√† c·ª≠a", "Kh√°c"
            ]
            
            if category in valid_categories:
                logger.info(f"AI ph√¢n lo·∫°i '{description}' -> '{category}'")
                return category
            else:
                logger.warning(f"AI tr·∫£ v·ªÅ danh m·ª•c kh√¥ng h·ª£p l·ªá: {category}")
                return "Kh√°c"
                
        except Exception as e:
            logger.error(f"L·ªói ph√¢n lo·∫°i AI: {e}")
            return "Kh√°c"
    
    def categorize_income(self, description: str) -> str:
        """
        Ph√¢n lo·∫°i kho·∫£n thu d·ª±a tr√™n m√¥ t·∫£
        
        Args:
            description: M√¥ t·∫£ kho·∫£n thu (VD: "l∆∞∆°ng", "b√°n h√†ng", "th∆∞·ªüng")
            
        Returns:
            str: Danh m·ª•c ƒë∆∞·ª£c ph√¢n lo·∫°i
        """
        if not self.enabled:
            return "Kh√°c"
        
        try:
            prompt = f"""
H√£y ph√¢n lo·∫°i kho·∫£n thu nh·∫≠p sau v√†o m·ªôt trong c√°c danh m·ª•c ph√π h·ª£p nh·∫•t:

M√¥ t·∫£: "{description}"

Danh s√°ch danh m·ª•c c√≥ s·∫µn:
- L∆∞∆°ng: l∆∞∆°ng th√°ng, l∆∞∆°ng c∆° b·∫£n, ph·ª• c·∫•p
- Th∆∞·ªüng: th∆∞·ªüng t·∫øt, th∆∞·ªüng d·ª± √°n, th∆∞·ªüng hi·ªáu su·∫•t
- Freelance: l√†m th√™m, d·ª± √°n c√° nh√¢n, part-time
- B√°n h√†ng: b√°n ƒë·ªì, kinh doanh nh·ªè l·∫ª
- ƒê·∫ßu t∆∞: c·ªï t·ª©c, l√£i su·∫•t, crypto, ch·ª©ng kho√°n
- Kh√°c: nh·ªØng kho·∫£n thu kh√°c

Ch·ªâ tr·∫£ v·ªÅ T√äN DANH M·ª§C, kh√¥ng gi·∫£i th√≠ch g√¨ th√™m.
"""
            
            response = self.model.generate_content(prompt)
            category = response.text.strip()
            
            # Validate danh m·ª•c tr·∫£ v·ªÅ
            valid_categories = [
                "L∆∞∆°ng", "Th∆∞·ªüng", "Freelance", "B√°n h√†ng", "ƒê·∫ßu t∆∞", "Kh√°c"
            ]
            
            if category in valid_categories:
                logger.info(f"AI ph√¢n lo·∫°i '{description}' -> '{category}'")
                return category
            else:
                logger.warning(f"AI tr·∫£ v·ªÅ danh m·ª•c kh√¥ng h·ª£p l·ªá: {category}")
                return "Kh√°c"
                
        except Exception as e:
            logger.error(f"L·ªói ph√¢n lo·∫°i AI: {e}")
            return "Kh√°c"
    
    def is_enabled(self) -> bool:
        """Ki·ªÉm tra AI c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng"""
        return self.enabled
    
    def get_api_status(self) -> dict:
        """L·∫•y tr·∫°ng th√°i t·∫•t c·∫£ API keys"""
        return self.api_manager.get_status()
    
    def get_current_key_info(self) -> str:
        """L·∫•y th√¥ng tin API key hi·ªán t·∫°i"""
        if not self.current_api_key:
            return "Kh√¥ng c√≥ API key"
        
        try:
            key_index = self.api_manager.api_keys.index(self.current_api_key) + 1
            return f"API Key {key_index} ({self.current_api_key[:20]}...)"
        except:
            return "Unknown key"
    
    def _generate_content(self, prompt: str) -> str:
        """Helper method ƒë·ªÉ generate content v·ªõi auto key rotation"""
        if not self.enabled:
            return ""
        
        max_retries = len(self.api_manager.api_keys) if self.api_manager.api_keys else 1
        
        for attempt in range(max_retries):
            try:
                # ƒê·∫£m b·∫£o c√≥ API key kh·∫£ d·ª•ng
                if not self.api_manager.has_available_keys():
                    logger.warning("‚ö†Ô∏è  T·∫•t c·∫£ API keys ƒë·ªÅu trong cooldown")
                    break
                
                # Reinitialize n·∫øu c·∫ßn
                self._initialize_with_current_key()
                
                if not self.enabled or not self.model:
                    break
                
                # Th·ª≠ generate content
                response = self.model.generate_content(prompt)
                return response.text.strip()
                
            except Exception as e:
                error_msg = str(e)
                logger.error(f"üö´ L·ªói generate content (attempt {attempt + 1}): {error_msg}")
                
                # ƒê√°nh d·∫•u key hi·ªán t·∫°i failed v√† rotate
                if self.current_api_key:
                    self.api_manager.mark_key_failed(self.current_api_key, error_msg)
                
                # N·∫øu kh√¥ng ph·∫£i l·ªói quota, kh√¥ng retry
                is_quota_error = any(keyword in error_msg.lower() for keyword in [
                    '429', 'quota', 'rate limit', 'exceeded', 'resource_exhausted'
                ])
                
                if not is_quota_error:
                    raise e
                
                # Th·ª≠ key ti·∫øp theo
                continue
        
        # H·∫øt t·∫•t c·∫£ attempts
        logger.error("‚ùå ƒê√£ th·ª≠ h·∫øt t·∫•t c·∫£ API keys")
        raise Exception("All API keys exhausted")