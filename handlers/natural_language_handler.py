import logging
import re
from datetime import datetime, timedelta
from typing import Dict, Any
from zalo_bot import Update
from zalo_bot.constants import ChatAction
from services.natural_language_processor import NaturalLanguageProcessor
from services.google_sheets import GoogleSheetsService
from services.gemini_ai import GeminiAIService
from utils.format_utils import format_currency


logger = logging.getLogger(__name__)

class NaturalLanguageHandler:
    """Handler x·ª≠ l√Ω tin nh·∫Øn ng√¥n ng·ªØ t·ª± nhi√™n"""
    
    def __init__(self, sheets_service: GoogleSheetsService = None, user_sheet_manager = None):
        self.nlp = NaturalLanguageProcessor()
        self.sheets_service = sheets_service
        self.user_sheet_manager = user_sheet_manager
        self.ai_service = GeminiAIService()
    
    async def handle_natural_message(self, update: Update, context) -> bool:
        """
        X·ª≠ l√Ω tin nh·∫Øn t·ª± nhi√™n
        
        Returns:
            bool: True n·∫øu ƒë√£ x·ª≠ l√Ω, False n·∫øu kh√¥ng hi·ªÉu
        """
        # Hi·ªÉn th·ªã "ƒëang so·∫°n tin..." ngay khi nh·∫≠n tin nh·∫Øn
        await context.bot.send_chat_action(
            chat_id=update.message.chat.id,
            action=ChatAction.TYPING
        )
        
        message_text = update.message.text
        user_name = update.message.from_user.display_name or "Ng∆∞·ªùi d√πng"
        user_id = update.message.from_user.id
        
        # Ki·ªÉm tra private mode v√† user setup
        if self.user_sheet_manager:
            # Private mode - ki·ªÉm tra user ƒë√£ setup sheet ch∆∞a
            if not self.user_sheet_manager.has_user_sheet(user_id):
                # Ki·ªÉm tra xem message c√≥ ph·∫£i l√† Google Sheet URL kh√¥ng
                if self.user_sheet_manager.is_google_sheet_url(message_text):
                    await self._handle_sheet_setup(update, context)
                    return True
                else:
                    # Ch∆∞a setup sheet, y√™u c·∫ßu setup
                    await self._handle_setup_request(update, context)
                    return True
        
        # Ph√¢n t√≠ch √Ω ƒë·ªãnh
        try:
            intent_result = self.nlp.process_message(message_text)
            
            # N·∫øu process_message tr·∫£ v·ªÅ coroutine, await n√≥
            if hasattr(intent_result, '__await__'):
                intent_result = await intent_result
            
            if not intent_result:
                # Kh√¥ng th·ªÉ ph√¢n t√≠ch - b·ªè qua
                return True
            
            intent = intent_result['intent']
        except Exception as e:
            logger.error(f"L·ªói ph√¢n t√≠ch √Ω ƒë·ªãnh: {e}")
            return True
        
        # N·∫øu l√† HELP_GUIDE - tin nh·∫Øn kh√¥ng li√™n quan t√†i ch√≠nh, tr·∫£ l·ªùi h∆∞·ªõng d·∫´n
        if intent == 'HELP_GUIDE':
            await self._handle_help_guide(update, context)
            return True
        
        # N·∫øu confidence th·∫•p, b·ªè qua
        if intent_result['confidence'] < 0.5:
            return True
        
        data = intent_result.get('data', {})
        
        try:
            if intent == 'EXPENSE':
                await self._handle_expense(update, data, user_name)
                return True
                
            elif intent == 'INCOME':
                await self._handle_income(update, data, user_name)
                return True
                
            elif intent == 'MULTIPLE_EXPENSES':
                await self._handle_multiple_expenses(update, data, user_name)
                return True
                
            elif intent == 'LENDING':
                await self._handle_lending(update, data, user_name)
                return True
                
            elif intent == 'BORROWING':
                await self._handle_borrowing(update, data, user_name)
                return True
                
            elif intent == 'STATS':
                await self._handle_stats(update, data)
                return True
                
            elif intent == 'CATEGORY_STATS':
                await self._handle_category_stats(update, data)
                return True
                
            elif intent == 'CATEGORY_LIST':
                await self._handle_category_list(update)
                return True
                
            elif intent == 'HELP':
                await self._handle_help(update)
                return True
                
            else:
                # Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ - b·ªè qua
                return True
                
        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω natural language: {e}")
            await update.message.reply_text(
                "üö´ C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i!"
            )
            return True
    
    async def _handle_expense(self, update: Update, data: Dict[str, Any], user_name: str):
        """X·ª≠ l√Ω kho·∫£n chi"""
        amount = data.get('amount')
        description = data.get('description', 'chi ti√™u')
        
        if not amount or amount <= 0:
            await update.message.reply_text(
                "ü§î T√¥i kh√¥ng th·∫•y s·ªë ti·ªÅn r√µ r√†ng. B·∫°n c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n kh√¥ng?\n\n" +
                "üí° V√≠ d·ª•: '500k tr√† s·ªØa' ho·∫∑c '200k ƒë·ªï xƒÉng'"
            )
            return
        
        # S·ª≠ d·ª•ng category t·ª´ AI ho·∫∑c fallback
        category = data.get('category')
        if not category:
            # Fallback n·∫øu AI kh√¥ng tr·∫£ v·ªÅ category
            if self.ai_service.is_enabled():
                category = self.ai_service.categorize_expense(description)
            else:
                category = "Kh√°c"
        
        # L∆∞u v√†o Google Sheets
        custom_date = data.get('custom_date')
        success = self._add_transaction_with_user_info(
            transaction_type="Chi",
            amount=amount,
            category=category,
            note=description,
            user_name=user_name,
            update=update,
            custom_date=custom_date
        )
        
        if success:
            from datetime import datetime
            from utils.date_utils import parse_custom_date
            
            # Hi·ªÉn th·ªã th·ªùi gian th·ª±c t·∫ø ƒë∆∞·ª£c ghi nh·∫≠n  
            actual_datetime = parse_custom_date(custom_date)
            current_time = datetime.now().strftime("%H:%M %d/%m/%Y")
            
            if custom_date:
                date_info = f"üìÖ Ng√†y: {actual_datetime.strftime('%d/%m/%Y')} (ghi l√∫c {current_time})"
            else:
                date_info = f"üìÖ Th·ªùi gian: {current_time}"
            
            response = f"""
‚úÖ ƒê√£ ghi nh·∫≠n kho·∫£n chi v√†o {current_time}!

üí∏ S·ªë ti·ªÅn: {format_currency(amount)}
üìÇ Danh m·ª•c: {category} {"ü§ñ" if self.ai_service.is_enabled() else ""}
üìù Ghi ch√∫: {description}
{date_info}
üë§ Ng∆∞·ªùi d√πng: {user_name}

üîó Xem chi ti·∫øt: {self._get_sheet_url(update)}
"""
        else:
            response = "üö´ C√≥ l·ªói khi l∆∞u d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i!"
        
        await update.message.reply_text(response.strip())
    
    async def _handle_income(self, update: Update, data: Dict[str, Any], user_name: str):
        """X·ª≠ l√Ω kho·∫£n thu"""
        amount = data.get('amount')
        description = data.get('description', 'thu nh·∫≠p')
        
        if not amount or amount <= 0:
            await update.message.reply_text(
                "ü§î T√¥i kh√¥ng th·∫•y s·ªë ti·ªÅn r√µ r√†ng. B·∫°n c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n kh√¥ng?\n\n" +
                "üí° V√≠ d·ª•: '5m l∆∞∆°ng th√°ng n√†y' ho·∫∑c '1tr th∆∞·ªüng d·ª± √°n'"
            )
            return
        
        # S·ª≠ d·ª•ng category t·ª´ AI ho·∫∑c fallback
        category = data.get('category')
        if not category:
            # Fallback n·∫øu AI kh√¥ng tr·∫£ v·ªÅ category
            if self.ai_service.is_enabled():
                category = self.ai_service.categorize_income(description)
            else:
                category = "Kh√°c"
        
        # L∆∞u v√†o Google Sheets
        custom_date = data.get('custom_date')
        success = self._add_transaction_with_user_info(
            transaction_type="Thu",
            amount=amount,
            category=category,
            note=description,
            user_name=user_name,
            update=update,
            custom_date=custom_date
        )
        
        if success:
            from datetime import datetime
            from utils.date_utils import parse_custom_date
            
            # Hi·ªÉn th·ªã th·ªùi gian th·ª±c t·∫ø ƒë∆∞·ª£c ghi nh·∫≠n  
            actual_datetime = parse_custom_date(custom_date)
            current_time = datetime.now().strftime("%H:%M %d/%m/%Y")
            
            if custom_date:
                date_info = f"üìÖ Ng√†y: {actual_datetime.strftime('%d/%m/%Y')} (ghi l√∫c {current_time})"
            else:
                date_info = f"üìÖ Th·ªùi gian: {current_time}"
            
            response = f"""
‚úÖ ƒê√£ ghi nh·∫≠n kho·∫£n thu v√†o {current_time}!

üí∞ S·ªë ti·ªÅn: {format_currency(amount)}
üìÇ Danh m·ª•c: {category} {"ü§ñ" if self.ai_service.is_enabled() else ""}
üìù Ghi ch√∫: {description}
{date_info}
üë§ Ng∆∞·ªùi d√πng: {user_name}

üîó Xem chi ti·∫øt: {self._get_sheet_url(update)}
"""
        else:
            response = "üö´ C√≥ l·ªói khi l∆∞u d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i!"
        
        await update.message.reply_text(response.strip())
    
    async def _handle_multiple_expenses(self, update: Update, data: Dict[str, Any], user_name: str):
        """X·ª≠ l√Ω nhi·ªÅu kho·∫£n chi kh√°c danh m·ª•c"""
        transactions = data.get('transactions', [])
        
        if not transactions:
            await update.message.reply_text(
                "ü§î T√¥i kh√¥ng th·ªÉ t√°ch ƒë∆∞·ª£c c√°c kho·∫£n chi. B·∫°n c√≥ th·ªÉ ghi t·ª´ng kho·∫£n ri√™ng ƒë∆∞·ª£c kh√¥ng?\n\n" +
                "üí° V√≠ d·ª•: G·ª≠i 3 tin nh·∫Øn ri√™ng:\n‚Ä¢ '32k b√∫n g√†'\n‚Ä¢ '1.5m laptop'\n‚Ä¢ '200k xƒÉng'"
            )
            return
        
        successful_transactions = []
        failed_transactions = []
        
        # X·ª≠ l√Ω t·ª´ng giao d·ªãch
        for transaction in transactions:
            amount = transaction.get('amount', 0)
            description = transaction.get('description', '')
            category = transaction.get('category', 'Kh√°c')
            custom_date = transaction.get('custom_date')  # L·∫•y custom_date t·ª´ t·ª´ng transaction
            
            if amount > 0 and description:
                success = self._add_transaction_with_user_info(
                    transaction_type="Chi",
                    amount=amount,
                    category=category,
                    note=description,
                    user_name=user_name,
                    update=update,
                    custom_date=custom_date
                )
                
                if success:
                    successful_transactions.append({
                        'amount': amount,
                        'description': description,
                        'category': category,
                        'custom_date': custom_date
                    })
                else:
                    failed_transactions.append({
                        'amount': amount,
                        'description': description,
                        'category': category
                    })
        
        # T·∫°o response
        if successful_transactions:
            from datetime import datetime
            from utils.date_utils import parse_custom_date
            
            current_time = datetime.now().strftime("%H:%M %d/%m/%Y")
            
            # Ki·ªÉm tra xem c√≥ custom_date kh√¥ng
            first_custom_date = successful_transactions[0].get('custom_date')
            if first_custom_date:
                actual_datetime = parse_custom_date(first_custom_date)
                date_info = f"üìÖ Ng√†y: {actual_datetime.strftime('%d/%m/%Y')} (ghi l√∫c {current_time})"
                header_date = actual_datetime.strftime('%d/%m/%Y')
            else:
                date_info = f"üìÖ Th·ªùi gian: {current_time}"
                header_date = current_time.split()[1]  # L·∫•y ph·∫ßn ng√†y
            
            total_amount = sum(t['amount'] for t in successful_transactions)
            response = f"‚úÖ **ƒê√£ ghi nh·∫≠n {len(successful_transactions)} kho·∫£n chi v√†o {header_date}!**\n\n"
            
            for i, transaction in enumerate(successful_transactions, 1):
                response += f"{i}. üí∏ {format_currency(transaction['amount'])}\n"
                response += f"   üìÇ {transaction['category']}\n"
                response += f"   üìù {transaction['description']}\n\n"
            
            response += f"üí∞ **T·ªïng c·ªông:** {format_currency(total_amount)}\n"
            response += f"{date_info}\n"
            response += f"üë§ **Ng∆∞·ªùi d√πng:** {user_name}\n\n"
            response += f"üîó **Xem chi ti·∫øt:** {self._get_sheet_url(update)}"
            
            if failed_transactions:
                response += f"\n\n‚ö†Ô∏è **C√≥ {len(failed_transactions)} kho·∫£n th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!**"
        else:
            response = "‚ùå Kh√¥ng th·ªÉ ghi nh·∫≠n kho·∫£n chi n√†o. Vui l√≤ng th·ª≠ l·∫°i!"
        
        await update.message.reply_text(response.strip())
    
    async def _handle_lending(self, update: Update, data: Dict[str, Any], user_name: str):
        """X·ª≠ l√Ω kho·∫£n cho vay"""
        amount = data.get('amount')
        description = data.get('description', 'cho vay')
        person = data.get('person', 'N/A')
        
        if not amount or amount <= 0:
            await update.message.reply_text(
                "ü§î T√¥i kh√¥ng th·∫•y s·ªë ti·ªÅn r√µ r√†ng. B·∫°n c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n kh√¥ng?\n\n" +
                "üí° V√≠ d·ª•: 'cho An vay 2tr' ho·∫∑c 'cho b·∫°n vay 1m'"
            )
            return
        
        # Category c·ªë ƒë·ªãnh cho lending
        category = "Cho vay"
        
        # L∆∞u v√†o Google Sheets
        custom_date = data.get('custom_date')
        success = self._add_transaction_with_user_info(
            transaction_type="Chi",  # Cho vay ƒë∆∞·ª£c t√≠nh l√† chi ti√™u
            amount=amount,
            category=category,
            note=f"{description} (cho {person})",
            user_name=user_name,
            update=update,
            custom_date=custom_date
        )
        
        if success:
            from datetime import datetime
            from utils.date_utils import parse_custom_date
            
            # Hi·ªÉn th·ªã th·ªùi gian th·ª±c t·∫ø ƒë∆∞·ª£c ghi nh·∫≠n  
            actual_datetime = parse_custom_date(custom_date)
            current_time = datetime.now().strftime("%H:%M %d/%m/%Y")
            
            if custom_date:
                date_info = f"üìÖ Ng√†y: {actual_datetime.strftime('%d/%m/%Y')} (ghi l√∫c {current_time})"
            else:
                date_info = f"üìÖ Th·ªùi gian: {current_time}"
            
            response = f"""
‚úÖ ƒê√£ ghi nh·∫≠n kho·∫£n cho vay v√†o {current_time}!

üí∏ S·ªë ti·ªÅn: {format_currency(amount)}
üìÇ Danh m·ª•c: {category}
üë• Cho vay: {person}
üìù Ghi ch√∫: {description}
{date_info}
üë§ Ng∆∞·ªùi d√πng: {user_name}

üîó Xem chi ti·∫øt: {self._get_sheet_url(update)}
"""
        else:
            response = "üö´ C√≥ l·ªói khi l∆∞u d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i!"
        
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def _handle_borrowing(self, update: Update, data: Dict[str, Any], user_name: str):
        """X·ª≠ l√Ω kho·∫£n ƒëi vay"""
        amount = data.get('amount')
        description = data.get('description', 'ƒëi vay')
        person = data.get('person', 'N/A')
        
        if not amount or amount <= 0:
            await update.message.reply_text(
                "ü§î T√¥i kh√¥ng th·∫•y s·ªë ti·ªÅn r√µ r√†ng. B·∫°n c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n kh√¥ng?\n\n" +
                "üí° V√≠ d·ª•: 'vay anh Nam 1tr' ho·∫∑c 'm∆∞·ª£n b·∫°n 500k'"
            )
            return
        
        # Category c·ªë ƒë·ªãnh cho borrowing
        category = "ƒêi vay"
        
        # L∆∞u v√†o Google Sheets
        custom_date = data.get('custom_date')
        success = self._add_transaction_with_user_info(
            transaction_type="Thu",  # ƒêi vay ƒë∆∞·ª£c t√≠nh l√† thu nh·∫≠p
            amount=amount,
            category=category,
            note=f"{description} (t·ª´ {person})",
            user_name=user_name,
            update=update,
            custom_date=custom_date
        )
        
        if success:
            from datetime import datetime
            from utils.date_utils import parse_custom_date
            
            # Hi·ªÉn th·ªã th·ªùi gian th·ª±c t·∫ø ƒë∆∞·ª£c ghi nh·∫≠n  
            actual_datetime = parse_custom_date(custom_date)
            current_time = datetime.now().strftime("%H:%M %d/%m/%Y")
            
            if custom_date:
                date_info = f"üìÖ Ng√†y: {actual_datetime.strftime('%d/%m/%Y')} (ghi l√∫c {current_time})"
            else:
                date_info = f"üìÖ Th·ªùi gian: {current_time}"
            
            response = f"""
‚úÖ ƒê√£ ghi nh·∫≠n kho·∫£n ƒëi vay v√†o {current_time}!

üí∞ S·ªë ti·ªÅn: {format_currency(amount)}
üìÇ Danh m·ª•c: {category}
üë• Vay t·ª´: {person}
üìù Ghi ch√∫: {description}
{date_info}
üë§ Ng∆∞·ªùi d√πng: {user_name}

üîó Xem chi ti·∫øt: {self._get_sheet_url(update)}
"""
        else:
            response = "üö´ C√≥ l·ªói khi l∆∞u d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i!"
        
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def _handle_stats(self, update: Update, data: Dict[str, Any]):
        """X·ª≠ l√Ω th·ªëng k√™ v·ªõi AI data"""
        time_period = data.get('time_period', 'thang')
        specific_value = data.get('specific_value')
        
        try:
            # T√≠nh to√°n kho·∫£ng th·ªùi gian d·ª±a tr√™n AI data
            if specific_value:
                start_date, end_date = self._get_date_range_with_specific_value(time_period, specific_value)
            else:
                start_date, end_date = self._get_date_range_for_period(time_period)
            
            # L·∫•y th·ªëng k√™ cho user n√†y
            user_name = update.message.from_user.display_name or "Ng∆∞·ªùi d√πng"
            user_id = update.message.from_user.id
            
            if self.user_sheet_manager:
                # Private mode - l·∫•y t·ª´ sheet ri√™ng c·ªßa user
                user_service = self.user_sheet_manager.get_user_service(user_id)
                if not user_service:
                    await update.message.reply_text("‚ùå B·∫°n ch∆∞a thi·∫øt l·∫≠p Google Sheet. Vui l√≤ng g·ª≠i link sheet c·ªßa b·∫°n!")
                    return
                stats = user_service.get_statistics(user_name, start_date, end_date)
            else:
                # Shared mode - l·∫•y t·ª´ sheet chung
                stats = self.sheets_service.get_statistics(user_name, start_date, end_date)
            
            # Format response v·ªõi t√™n ph√π h·ª£p
            if time_period == 'custom':
                # Kho·∫£ng th·ªùi gian t√πy ch·ªânh
                period_name = f"t·ª´ {start_date.strftime('%d/%m')} ƒë·∫øn {end_date.strftime('%d/%m')}"
            elif time_period == 'ngay' and specific_value:
                # Ng√†y c·ª• th·ªÉ ho·∫∑c keywords
                if "/" in specific_value:
                    period_name = f"ng√†y {start_date.strftime('%d/%m/%Y')}"
                elif specific_value in ["h√¥m qua", "ng√†y h√¥m qua"]:
                    period_name = f"h√¥m qua ({start_date.strftime('%d/%m/%Y')})"
                elif specific_value in ["h√¥m kia", "ng√†y h√¥m kia"]:
                    period_name = f"h√¥m kia ({start_date.strftime('%d/%m/%Y')})"
                else:
                    period_name = f"ng√†y {start_date.strftime('%d/%m/%Y')}"
            else:
                period_name = {
                    'ngay': 'h√¥m nay',
                    'tuan': 'tu·∫ßn n√†y', 
                    'thang': 'th√°ng n√†y',
                    'nam': 'nƒÉm n√†y'
                }.get(time_period, 'kho·∫£ng th·ªùi gian')
            
            response = f"""
üìä TH·ªêNG K√ä {period_name.upper()}
üìÖ {start_date.strftime('%d/%m/%Y')} - {end_date.strftime('%d/%m/%Y')}

üí∞ T·ªïng thu: {format_currency(stats['total_income'])}
üí∏ T·ªïng chi: {format_currency(stats['total_expense'])}
üíµ S·ªë d∆∞: {format_currency(stats['balance'])}
üìù Giao d·ªãch: {stats['transaction_count']}

üîó Xem chi ti·∫øt: {self._get_sheet_url(update)}
"""
            
            await update.message.reply_text(response.strip())
            
        except Exception as e:
            logger.error(f"L·ªói t·∫°o th·ªëng k√™: {e}")
            await update.message.reply_text(
                f"üö´ C√≥ l·ªói khi t·∫°o th·ªëng k√™ {period_name}. Vui l√≤ng th·ª≠ l·∫°i!"
            )
    
    async def _handle_help(self, update: Update):
        """X·ª≠ l√Ω tr·ª£ gi√∫p"""
        response = f"""
ü§ñ **BOT QU·∫¢N L√ù THU CHI TH√îNG MINH**

‚ú® **T√¥i hi·ªÉu ng√¥n ng·ªØ t·ª± nhi√™n v√† t·ª± ƒë·ªông ph√¢n lo·∫°i b·∫±ng AI!**

üí∏ **GHI CHI TI√äU:**
‚Ä¢ `"500k tr√† s·ªØa"` ‚Üí T·ª± ƒë·ªông ph√¢n lo·∫°i "ƒÇn u·ªëng"
‚Ä¢ `"h√¥m qua 200k xƒÉng"` ‚Üí C√≥ th·ªÉ ghi ng√†y c·ª• th·ªÉ
‚Ä¢ `"b√∫n 50k, laptop 1.5m"` ‚Üí T·ª± t√°ch th√†nh 2 giao d·ªãch
‚Ä¢ `"5/9 b√°nh 150k"` ‚Üí Ghi cho ng√†y 5/9

üí∞ **GHI THU NH·∫¨P:**
‚Ä¢ `"5m l∆∞∆°ng"` ‚Üí Ghi thu nh·∫≠p
‚Ä¢ `"nh·∫≠n 1tr th∆∞·ªüng"` ‚Üí AI hi·ªÉu t·ª´ kh√≥a
‚Ä¢ `"2/9 th∆∞·ªüng 500k"` ‚Üí Thu nh·∫≠p ng√†y c·ª• th·ªÉ

üìä **XEM TH·ªêNG K√ä:**
‚Ä¢ `"th·ªëng k√™"` ‚Üí Th√°ng hi·ªán t·∫°i
‚Ä¢ `"th·ªëng k√™ h√¥m nay"` ‚Üí Ch·ªâ h√¥m nay
‚Ä¢ `"th·ªëng k√™ h√¥m qua"` ‚Üí Ch·ªâ h√¥m qua
‚Ä¢ `"th·ªëng k√™ th√°ng 8"` ‚Üí Th√°ng c·ª• th·ªÉ
‚Ä¢ `"th·ªëng k√™ t·ª´ 1/8 ƒë·∫øn 15/8"` ‚Üí Kho·∫£ng t√πy ch·ªânh

üìà **TH·ªêNG K√ä DANH M·ª§C:**
‚Ä¢ `"ƒÉn u·ªëng"` ‚Üí Chi ti√™u ƒÉn u·ªëng th√°ng n√†y
‚Ä¢ `"ƒÉn u·ªëng h√¥m qua"` ‚Üí ƒÇn u·ªëng ng√†y c·ª• th·ªÉ
‚Ä¢ `"top chi ti√™u"` ‚Üí Top 5 kho·∫£n chi l·ªõn nh·∫•t
‚Ä¢ `"danh m·ª•c"` ‚Üí Xem t·∫•t c·∫£ danh m·ª•c

üéØ **DANH M·ª§C T·ª∞ ƒê·ªòNG:**
üçú ƒÇn u·ªëng ‚Ä¢ üõí Mua s·∫Øm ‚Ä¢ ‚õΩ Di chuy·ªÉn ‚Ä¢ üè• Y t·∫ø
üéÆ Gi·∫£i tr√≠ ‚Ä¢ üè† Sinh ho·∫°t ‚Ä¢ üìö H·ªçc t·∫≠p ‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Gia ƒë√¨nh

üí° **M·∫∏O HAY:**
‚Ä¢ C√≥ th·ªÉ ghi nhi·ªÅu m√≥n: `"b√∫n 12k, g√† 20k, laptop 1.5m"`
‚Ä¢ H·ªó tr·ª£ ƒë∆°n v·ªã: k (ngh√¨n), m (tri·ªáu), tr (tri·ªáu)
‚Ä¢ Hi·ªÉu ng√†y: h√¥m qua, h√¥m nay, 5/9, 2/10/2024

üöÄ **N√≥i chuy·ªán t·ª± nhi√™n v·ªõi t√¥i! T√¥i s·∫Ω hi·ªÉu v√† ghi ch√©p cho b·∫°n!**
"""
        
        await update.message.reply_text(response.strip())
    
    def _get_date_range_for_period(self, period: str):
        """L·∫•y kho·∫£ng th·ªùi gian theo period"""
        now = datetime.now()
        
        if period == 'ngay':
            start = now.replace(hour=0, minute=0, second=0, microsecond=0)
            end = now.replace(hour=23, minute=59, second=59, microsecond=999999)
        elif period == 'tuan':
            # Tu·∫ßn n√†y (Th·ª© 2 ƒë·∫øn Ch·ªß nh·∫≠t)
            days_since_monday = now.weekday()
            start = (now - timedelta(days=days_since_monday)).replace(hour=0, minute=0, second=0, microsecond=0)
            end = (start + timedelta(days=6)).replace(hour=23, minute=59, second=59, microsecond=999999)
        elif period == 'nam':
            start = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
            end = now.replace(month=12, day=31, hour=23, minute=59, second=59, microsecond=999999)
        else:  # 'thang'
            start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            if now.month == 12:
                end = now.replace(year=now.year+1, month=1, day=1, hour=0, minute=0, second=0, microsecond=0) - timedelta(microseconds=1)
            else:
                end = now.replace(month=now.month+1, day=1, hour=0, minute=0, second=0, microsecond=0) - timedelta(microseconds=1)
        
        return start, end
    
    def _get_current_month_range(self):
        """L·∫•y kho·∫£ng th·ªùi gian th√°ng hi·ªán t·∫°i"""
        return self._get_date_range_for_period('thang')
    
    def _get_date_range_with_specific_value(self, time_period: str, specific_value: str):
        """X·ª≠ l√Ω kho·∫£ng th·ªùi gian v·ªõi gi√° tr·ªã c·ª• th·ªÉ t·ª´ AI"""
        now = datetime.now()
        
        if time_period == "custom" and "-" in specific_value:
            # X·ª≠ l√Ω kho·∫£ng th·ªùi gian t√πy ch·ªânh: "01/08-31/08"
            try:
                start_str, end_str = specific_value.split("-")
                
                # Parse ng√†y b·∫Øt ƒë·∫ßu (dd/mm)
                if "/" in start_str:
                    start_day, start_month = map(int, start_str.split("/"))
                    start_year = now.year
                    start = datetime(start_year, start_month, start_day, 0, 0, 0)
                
                # Parse ng√†y k·∫øt th√∫c (dd/mm)
                if "/" in end_str:
                    end_day, end_month = map(int, end_str.split("/"))
                    end_year = now.year
                    end = datetime(end_year, end_month, end_day, 23, 59, 59, 999999)
                
                return start, end
            except Exception as e:
                logger.error(f"L·ªói parse custom date range: {specific_value}, {e}")
                # Fallback to current month
                return self._get_date_range_for_period('thang')
        
        elif specific_value == "thang_truoc":
            # Th√°ng tr∆∞·ªõc
            if now.month == 1:
                prev_month = 12
                year = now.year - 1
            else:
                prev_month = now.month - 1
                year = now.year
            
            start = datetime(year, prev_month, 1)
            if prev_month == 12:
                end = datetime(year + 1, 1, 1) - timedelta(microseconds=1)
            else:
                end = datetime(year, prev_month + 1, 1) - timedelta(microseconds=1)
            return start, end
            
        elif specific_value == "tuan_truoc":
            # Tu·∫ßn tr∆∞·ªõc
            days_since_monday = now.weekday()
            current_week_start = now - timedelta(days=days_since_monday)
            prev_week_start = current_week_start - timedelta(days=7)
            prev_week_end = prev_week_start + timedelta(days=6, hours=23, minutes=59, seconds=59)
            return prev_week_start.replace(hour=0, minute=0, second=0, microsecond=0), prev_week_end
            
        elif time_period == "ngay" and specific_value:
            # X·ª≠ l√Ω ng√†y cho th·ªëng k√™
            if "/" in specific_value:
                # Ng√†y c·ª• th·ªÉ: "2/9", "15/8", "02/09"
                try:
                    if len(specific_value.split("/")) == 2:
                        day, month = map(int, specific_value.split("/"))
                        year = now.year
                        
                        # T·∫°o ng√†y c·ª• th·ªÉ
                        target_date = datetime(year, month, day)
                        
                        # N·∫øu ng√†y trong t∆∞∆°ng lai c·ªßa nƒÉm hi·ªán t·∫°i, c√≥ th·ªÉ l√† nƒÉm tr∆∞·ªõc
                        if target_date > now:
                            target_date = datetime(year - 1, month, day)
                        
                        # T·∫°o kho·∫£ng th·ªùi gian cho c·∫£ ng√†y ƒë√≥
                        start = target_date.replace(hour=0, minute=0, second=0, microsecond=0)
                        end = target_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                        return start, end
                except Exception as e:
                    logger.error(f"L·ªói parse ng√†y c·ª• th·ªÉ: {specific_value}, {e}")
            
            elif specific_value in ["h√¥m qua", "ng√†y h√¥m qua"]:
                # H√¥m qua
                yesterday = now - timedelta(days=1)
                start = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
                end = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
                return start, end
                
            elif specific_value in ["h√¥m kia", "ng√†y h√¥m kia"]:
                # H√¥m kia
                day_before_yesterday = now - timedelta(days=2)
                start = day_before_yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
                end = day_before_yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
                return start, end
                
        elif specific_value.isdigit():
            # Th√°ng c·ª• th·ªÉ (s·ªë)
            month = int(specific_value)
            if 1 <= month <= 12:
                start = datetime(now.year, month, 1)
                if month == 12:
                    end = datetime(now.year + 1, 1, 1) - timedelta(microseconds=1)
                else:
                    end = datetime(now.year, month + 1, 1) - timedelta(microseconds=1)
                return start, end
        
        # Fallback to current period
        return self._get_date_range_for_period(time_period)
    
    async def _handle_help_guide(self, update: Update, context):
        """X·ª≠ l√Ω tin nh·∫Øn kh√¥ng li√™n quan t√†i ch√≠nh - tr·∫£ l·ªùi h∆∞·ªõng d·∫´n"""
        user_name = update.message.from_user.display_name or "b·∫°n"
        
        response = f"""
üëã Xin ch√†o {user_name}!

ü§ñ **T√¥i l√† Bot Qu·∫£n L√Ω Thu Chi AI - ch·ªâ h·ªó tr·ª£ v·ªÅ t√†i ch√≠nh:**

üí∏ **V√ç D·ª§ CHI TI√äU:**
‚Ä¢ `"500k tr√† s·ªØa"` ‚Üí ƒÇn u·ªëng
‚Ä¢ `"h√¥m qua 200k xƒÉng"` ‚Üí Di chuy·ªÉn (ng√†y c·ª• th·ªÉ)
‚Ä¢ `"b√∫n 50k, laptop 1.5m"` ‚Üí T·ª± t√°ch 2 giao d·ªãch

üí∞ **V√ç D·ª§ THU NH·∫¨P:**
‚Ä¢ `"5m l∆∞∆°ng"` ‚Üí L∆∞∆°ng
‚Ä¢ `"nh·∫≠n 1tr th∆∞·ªüng"` ‚Üí Th∆∞·ªüng
‚Ä¢ `"2/9 ƒë∆∞·ª£c 500k"` ‚Üí Thu nh·∫≠p ng√†y 2/9

üìä **V√ç D·ª§ TH·ªêNG K√ä:**
‚Ä¢ `"th·ªëng k√™"` ‚Üí Th√°ng n√†y
‚Ä¢ `"ƒÉn u·ªëng h√¥m qua"` ‚Üí Danh m·ª•c c·ª• th·ªÉ
‚Ä¢ `"top chi ti√™u"` ‚Üí X·∫øp h·∫°ng

‚ú® **T√çNH NƒÇNG ƒê·∫∂C BI·ªÜT:**
ü§ñ AI t·ª± ƒë·ªông ph√¢n lo·∫°i danh m·ª•c
üìÖ H·ªó tr·ª£ ghi ng√†y qu√° kh·ª©
üî¢ T·ª± ƒë·ªông t√°ch nhi·ªÅu kho·∫£n trong 1 tin nh·∫Øn
üìä Th·ªëng k√™ chi ti·∫øt v·ªõi bi·ªÉu ƒë·ªì

‚ùì **C·∫ßn tr·ª£ gi√∫p chi ti·∫øt?** Nh·∫Øn `"help"` ho·∫∑c `"h∆∞·ªõng d·∫´n"`

üí° **H√£y n√≥i chuy·ªán t·ª± nhi√™n v·ªÅ t√†i ch√≠nh v·ªõi t√¥i!** üòä
"""
        
        await update.message.reply_text(response.strip())
    
    def _add_transaction_with_user_info(self, transaction_type: str, amount: float, 
                                      category: str, note: str, user_name: str, update: Update, custom_date: str = None) -> bool:
        """Helper method ƒë·ªÉ th√™m transaction v·ªõi service ph√π h·ª£p"""
        try:
            user_id = update.message.from_user.id
            
            if self.user_sheet_manager:
                # Private mode - s·ª≠ d·ª•ng sheet ri√™ng c·ªßa user
                user_service = self.user_sheet_manager.get_user_service(user_id)
                if not user_service:
                    logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y user service cho {user_name}")
                    return False
                
                return user_service.add_transaction(
                    transaction_type=transaction_type,
                    amount=amount,
                    category=category,
                    note=note,
                    user_name=user_name,
                    custom_date=custom_date
                )
            else:
                # Shared mode - s·ª≠ d·ª•ng sheet chung
                return self.sheets_service.add_transaction(
                    transaction_type=transaction_type,
                    amount=amount,
                    category=category,
                    note=note,
                    user_name=user_name,
                    custom_date=custom_date
                )
        except Exception as e:
            logger.error(f"‚ùå L·ªói th√™m transaction: {e}")
            return False
    
    async def _handle_setup_request(self, update: Update, context):
        """Y√™u c·∫ßu user setup Google Sheet"""
        user_name = update.message.from_user.display_name or "b·∫°n"
        setup_message = self.user_sheet_manager.generate_setup_message(user_name)
        await update.message.reply_text(setup_message.strip())
    
    async def _handle_sheet_setup(self, update: Update, context):
        """X·ª≠ l√Ω setup Google Sheet t·ª´ user"""
        message_text = update.message.text
        user_name = update.message.from_user.display_name or "Ng∆∞·ªùi d√πng"
        user_id = update.message.from_user.id
        
        # Th·ª≠ th√™m sheet cho user
        success = self.user_sheet_manager.add_user_sheet(user_id, user_name, message_text)
        
        if success:
            response = f"""
‚úÖ **THI·∫æT L·∫¨P TH√ÄNH C√îNG!**

üë§ User: {user_name}
üìä Google Sheet ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi!

üéâ **B·∫ÆT ƒê·∫¶U S·ª¨ D·ª§NG:**
‚Ä¢ "500k tr√† s·ªØa" - Ghi chi ti√™u
‚Ä¢ "thu 5m l∆∞∆°ng" - Ghi thu nh·∫≠p  
‚Ä¢ "th·ªëng k√™ th√°ng n√†y" - Xem b√°o c√°o

üîí **B·∫£o m·∫≠t:** Ch·ªâ b·∫°n v√† bot m·ªõi truy c·∫≠p ƒë∆∞·ª£c sheet n√†y!
"""
        else:
            response = f"""
‚ùå **L·ªñI THI·∫æT L·∫¨P!**

‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Google Sheet c·ªßa b·∫°n.

üîß **KI·ªÇM TRA:**
‚Ä¢ Link c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng Google Sheets kh√¥ng?
‚Ä¢ ƒê√£ chia s·∫ª v·ªõi service account ch∆∞a?
‚Ä¢ Sheet c√≥ t·ªìn t·∫°i v√† truy c·∫≠p ƒë∆∞·ª£c kh√¥ng?

üí° H√£y th·ª≠ l·∫°i v·ªõi link kh√°c ho·∫∑c ki·ªÉm tra quy·ªÅn truy c·∫≠p!
"""
        
        await update.message.reply_text(response.strip())
    
    async def _handle_category_stats(self, update: Update, data: Dict[str, Any]):
        """X·ª≠ l√Ω y√™u c·∫ßu th·ªëng k√™ theo danh m·ª•c"""
        try:
            if self.user_sheet_manager:
                # Private mode
                user_id = update.message.from_user.id
                user_name = update.message.from_user.display_name or "Ng∆∞·ªùi d√πng"
                
                if not self.user_sheet_manager.has_user_sheet(user_id):
                    await self._handle_setup_request(update, None)
                    return
                
                # T·∫°o sheets service cho user
                sheets_service = self.user_sheet_manager.get_user_service(user_id)
                if not sheets_service:
                    await update.message.reply_text(
                        "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Google Sheet c·ªßa b·∫°n. Vui l√≤ng thi·∫øt l·∫≠p l·∫°i!"
                    )
                    return
            else:
                # Shared mode
                sheets_service = self.sheets_service
            
            # L·∫•y th√¥ng tin t·ª´ AI data
            category_name = data.get('category_name', '')
            time_period = data.get('time_period', 'thang')
            specific_value = data.get('specific_value')
            
            # Import v√† g·ªçi handler ph√π h·ª£p
            if category_name:
                # Th·ªëng k√™ danh m·ª•c c·ª• th·ªÉ v·ªõi th·ªùi gian t·ª´ AI
                from handlers.stats_handler import handle_specific_category_stats_direct
                await handle_specific_category_stats_direct(update, sheets_service, category_name, time_period, specific_value)
            else:
                # Th·ªëng k√™ t·∫•t c·∫£ danh m·ª•c v·ªõi th·ªùi gian t·ª´ AI
                from handlers.stats_handler import handle_category_stats_direct
                await handle_category_stats_direct(update, sheets_service, time_period, specific_value)
            
        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω th·ªëng k√™ danh m·ª•c: {e}")
            await update.message.reply_text(
                "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o th·ªëng k√™ danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i!"
            )
    
    async def _handle_category_list(self, update: Update):
        """X·ª≠ l√Ω y√™u c·∫ßu xem danh m·ª•c"""
        try:
            if self.user_sheet_manager:
                # Private mode
                user_id = update.message.from_user.id
                
                if not self.user_sheet_manager.has_user_sheet(user_id):
                    await self._handle_setup_request(update, None)
                    return
                
                # T·∫°o sheets service cho user
                sheets_service = self.user_sheet_manager.get_user_service(user_id)
                if not sheets_service:
                    await update.message.reply_text(
                        "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Google Sheet c·ªßa b·∫°n. Vui l√≤ng thi·∫øt l·∫≠p l·∫°i!"
                    )
                    return
            else:
                # Shared mode
                sheets_service = self.sheets_service
            
            # Import v√† g·ªçi handler
            from handlers.stats_handler import handle_categories_direct
            await handle_categories_direct(update, sheets_service)
            
        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω danh m·ª•c: {e}")
            await update.message.reply_text(
                "‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i!"
            )
     

    def _get_sheet_url(self, update: Update) -> str:
        """Helper method ƒë·ªÉ l·∫•y sheet URL ph√π h·ª£p v·ªõi t·ª´ng mode"""
        try:
            if self.user_sheet_manager:
                # Private mode - l·∫•y URL sheet ri√™ng c·ªßa user
                user_id = update.message.from_user.id
                sheet_url = self.user_sheet_manager.get_user_sheet_url(user_id)
                return sheet_url or "Sheet ri√™ng c·ªßa b·∫°n"
            else:
                # Shared mode - l·∫•y URL sheet chung
                return self.sheets_service.get_sheet_url() if self.sheets_service else "Google Sheet"
        except Exception as e:
            logger.error(f"‚ùå L·ªói l·∫•y sheet URL: {e}")
            return "Google Sheet" 
